'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BurzlyDB")>  _
Partial Public Class BurzlyDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertProduct(instance As Product)
    End Sub
  Partial Private Sub UpdateProduct(instance As Product)
    End Sub
  Partial Private Sub DeleteProduct(instance As Product)
    End Sub
  Partial Private Sub InsertPayment(instance As Payment)
    End Sub
  Partial Private Sub UpdatePayment(instance As Payment)
    End Sub
  Partial Private Sub DeletePayment(instance As Payment)
    End Sub
  Partial Private Sub InsertStock(instance As Stock)
    End Sub
  Partial Private Sub UpdateStock(instance As Stock)
    End Sub
  Partial Private Sub DeleteStock(instance As Stock)
    End Sub
  Partial Private Sub InsertSupplier(instance As Supplier)
    End Sub
  Partial Private Sub UpdateSupplier(instance As Supplier)
    End Sub
  Partial Private Sub DeleteSupplier(instance As Supplier)
    End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  Partial Private Sub InsertReservation(instance As Reservation)
    End Sub
  Partial Private Sub UpdateReservation(instance As Reservation)
    End Sub
  Partial Private Sub DeleteReservation(instance As Reservation)
    End Sub
  Partial Private Sub InsertEmployee(instance As Employee)
    End Sub
  Partial Private Sub UpdateEmployee(instance As Employee)
    End Sub
  Partial Private Sub DeleteEmployee(instance As Employee)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Burzly.My.MySettings.Default.BurzlyDBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
		Get
			Return Me.GetTable(Of Product)
		End Get
	End Property
	
	Public ReadOnly Property Payments() As System.Data.Linq.Table(Of Payment)
		Get
			Return Me.GetTable(Of Payment)
		End Get
	End Property
	
	Public ReadOnly Property Stocks() As System.Data.Linq.Table(Of Stock)
		Get
			Return Me.GetTable(Of Stock)
		End Get
	End Property
	
	Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Supplier)
		Get
			Return Me.GetTable(Of Supplier)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
	
	Public ReadOnly Property Reservations() As System.Data.Linq.Table(Of Reservation)
		Get
			Return Me.GetTable(Of Reservation)
		End Get
	End Property
	
	Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employee)
		Get
			Return Me.GetTable(Of Employee)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Product")>  _
Partial Public Class Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _productID As String
	
	Private _productName As String
	
	Private _productDescrip As String
	
	Private _productStatus As String
	
	Private _productDealerPrice As System.Nullable(Of Decimal)
	
	Private _productBeforeGST As System.Nullable(Of Decimal)
	
	Private _productAfterGST As System.Nullable(Of Decimal)
	
	Private _productImageName As String
	
	Private _Order As EntityRef(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnproductIDChanging(value As String)
    End Sub
    Partial Private Sub OnproductIDChanged()
    End Sub
    Partial Private Sub OnproductNameChanging(value As String)
    End Sub
    Partial Private Sub OnproductNameChanged()
    End Sub
    Partial Private Sub OnproductDescripChanging(value As String)
    End Sub
    Partial Private Sub OnproductDescripChanged()
    End Sub
    Partial Private Sub OnproductStatusChanging(value As String)
    End Sub
    Partial Private Sub OnproductStatusChanged()
    End Sub
    Partial Private Sub OnproductDealerPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnproductDealerPriceChanged()
    End Sub
    Partial Private Sub OnproductBeforeGSTChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnproductBeforeGSTChanged()
    End Sub
    Partial Private Sub OnproductAfterGSTChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnproductAfterGSTChanged()
    End Sub
    Partial Private Sub OnproductImageNameChanging(value As String)
    End Sub
    Partial Private Sub OnproductImageNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Order = CType(Nothing, EntityRef(Of [Order]))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property productID() As String
		Get
			Return Me._productID
		End Get
		Set
			If (String.Equals(Me._productID, value) = false) Then
				If Me._Order.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnproductIDChanging(value)
				Me.SendPropertyChanging
				Me._productID = value
				Me.SendPropertyChanged("productID")
				Me.OnproductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productName", DbType:="VarChar(50)")>  _
	Public Property productName() As String
		Get
			Return Me._productName
		End Get
		Set
			If (String.Equals(Me._productName, value) = false) Then
				Me.OnproductNameChanging(value)
				Me.SendPropertyChanging
				Me._productName = value
				Me.SendPropertyChanged("productName")
				Me.OnproductNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productDescrip", DbType:="VarChar(MAX)")>  _
	Public Property productDescrip() As String
		Get
			Return Me._productDescrip
		End Get
		Set
			If (String.Equals(Me._productDescrip, value) = false) Then
				Me.OnproductDescripChanging(value)
				Me.SendPropertyChanging
				Me._productDescrip = value
				Me.SendPropertyChanged("productDescrip")
				Me.OnproductDescripChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productStatus", DbType:="VarChar(20)")>  _
	Public Property productStatus() As String
		Get
			Return Me._productStatus
		End Get
		Set
			If (String.Equals(Me._productStatus, value) = false) Then
				Me.OnproductStatusChanging(value)
				Me.SendPropertyChanging
				Me._productStatus = value
				Me.SendPropertyChanged("productStatus")
				Me.OnproductStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productDealerPrice", DbType:="Money")>  _
	Public Property productDealerPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._productDealerPrice
		End Get
		Set
			If (Me._productDealerPrice.Equals(value) = false) Then
				Me.OnproductDealerPriceChanging(value)
				Me.SendPropertyChanging
				Me._productDealerPrice = value
				Me.SendPropertyChanged("productDealerPrice")
				Me.OnproductDealerPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productBeforeGST", DbType:="Money")>  _
	Public Property productBeforeGST() As System.Nullable(Of Decimal)
		Get
			Return Me._productBeforeGST
		End Get
		Set
			If (Me._productBeforeGST.Equals(value) = false) Then
				Me.OnproductBeforeGSTChanging(value)
				Me.SendPropertyChanging
				Me._productBeforeGST = value
				Me.SendPropertyChanged("productBeforeGST")
				Me.OnproductBeforeGSTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productAfterGST", DbType:="Decimal(18,2)")>  _
	Public Property productAfterGST() As System.Nullable(Of Decimal)
		Get
			Return Me._productAfterGST
		End Get
		Set
			If (Me._productAfterGST.Equals(value) = false) Then
				Me.OnproductAfterGSTChanging(value)
				Me.SendPropertyChanging
				Me._productAfterGST = value
				Me.SendPropertyChanged("productAfterGST")
				Me.OnproductAfterGSTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productImageName", DbType:="NVarChar(50)")>  _
	Public Property productImageName() As String
		Get
			Return Me._productImageName
		End Get
		Set
			If (String.Equals(Me._productImageName, value) = false) Then
				Me.OnproductImageNameChanging(value)
				Me.SendPropertyChanging
				Me._productImageName = value
				Me.SendPropertyChanged("productImageName")
				Me.OnproductImageNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_Product", Storage:="_Order", ThisKey:="productID", OtherKey:="productID", IsForeignKey:=true)>  _
	Public Property [Order]() As [Order]
		Get
			Return Me._Order.Entity
		End Get
		Set
			Dim previousValue As [Order] = Me._Order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Order.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._Order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._productID = value.productID
				Else
					Me._productID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("[Order]")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Payment")>  _
Partial Public Class Payment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _paymentId As Integer
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _paymentTime As String
	
	Private _paymentTotalPrice As System.Nullable(Of Decimal)
	
	Private _paymentMember As String
	
	Private _paymentDiscount As System.Nullable(Of Decimal)
	
	Private _paymentGrandTotal As System.Nullable(Of Decimal)
	
	Private _paymentPayBy As String
	
	Private _paymentTableNo As String
	
	Private _Orders As EntitySet(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpaymentIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnpaymentIdChanged()
    End Sub
    Partial Private Sub OnpaymentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnpaymentDateChanged()
    End Sub
    Partial Private Sub OnpaymentTimeChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentTimeChanged()
    End Sub
    Partial Private Sub OnpaymentTotalPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpaymentTotalPriceChanged()
    End Sub
    Partial Private Sub OnpaymentMemberChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentMemberChanged()
    End Sub
    Partial Private Sub OnpaymentDiscountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpaymentDiscountChanged()
    End Sub
    Partial Private Sub OnpaymentGrandTotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpaymentGrandTotalChanged()
    End Sub
    Partial Private Sub OnpaymentPayByChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentPayByChanged()
    End Sub
    Partial Private Sub OnpaymentTableNoChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentTableNoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property paymentId() As Integer
		Get
			Return Me._paymentId
		End Get
		Set
			If ((Me._paymentId = value)  _
						= false) Then
				Me.OnpaymentIdChanging(value)
				Me.SendPropertyChanging
				Me._paymentId = value
				Me.SendPropertyChanged("paymentId")
				Me.OnpaymentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="Date")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me.OnpaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._paymentDate = value
				Me.SendPropertyChanged("paymentDate")
				Me.OnpaymentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentTime", DbType:="VarChar(20)")>  _
	Public Property paymentTime() As String
		Get
			Return Me._paymentTime
		End Get
		Set
			If (String.Equals(Me._paymentTime, value) = false) Then
				Me.OnpaymentTimeChanging(value)
				Me.SendPropertyChanging
				Me._paymentTime = value
				Me.SendPropertyChanged("paymentTime")
				Me.OnpaymentTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentTotalPrice", DbType:="Decimal(18,2)")>  _
	Public Property paymentTotalPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._paymentTotalPrice
		End Get
		Set
			If (Me._paymentTotalPrice.Equals(value) = false) Then
				Me.OnpaymentTotalPriceChanging(value)
				Me.SendPropertyChanging
				Me._paymentTotalPrice = value
				Me.SendPropertyChanged("paymentTotalPrice")
				Me.OnpaymentTotalPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentMember", DbType:="VarChar(3)")>  _
	Public Property paymentMember() As String
		Get
			Return Me._paymentMember
		End Get
		Set
			If (String.Equals(Me._paymentMember, value) = false) Then
				Me.OnpaymentMemberChanging(value)
				Me.SendPropertyChanging
				Me._paymentMember = value
				Me.SendPropertyChanged("paymentMember")
				Me.OnpaymentMemberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDiscount", DbType:="Decimal(18,2)")>  _
	Public Property paymentDiscount() As System.Nullable(Of Decimal)
		Get
			Return Me._paymentDiscount
		End Get
		Set
			If (Me._paymentDiscount.Equals(value) = false) Then
				Me.OnpaymentDiscountChanging(value)
				Me.SendPropertyChanging
				Me._paymentDiscount = value
				Me.SendPropertyChanged("paymentDiscount")
				Me.OnpaymentDiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentGrandTotal", DbType:="Decimal(18,2)")>  _
	Public Property paymentGrandTotal() As System.Nullable(Of Decimal)
		Get
			Return Me._paymentGrandTotal
		End Get
		Set
			If (Me._paymentGrandTotal.Equals(value) = false) Then
				Me.OnpaymentGrandTotalChanging(value)
				Me.SendPropertyChanging
				Me._paymentGrandTotal = value
				Me.SendPropertyChanged("paymentGrandTotal")
				Me.OnpaymentGrandTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentPayBy", DbType:="VarChar(20)")>  _
	Public Property paymentPayBy() As String
		Get
			Return Me._paymentPayBy
		End Get
		Set
			If (String.Equals(Me._paymentPayBy, value) = false) Then
				Me.OnpaymentPayByChanging(value)
				Me.SendPropertyChanging
				Me._paymentPayBy = value
				Me.SendPropertyChanged("paymentPayBy")
				Me.OnpaymentPayByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentTableNo", DbType:="VarChar(7)")>  _
	Public Property paymentTableNo() As String
		Get
			Return Me._paymentTableNo
		End Get
		Set
			If (String.Equals(Me._paymentTableNo, value) = false) Then
				Me.OnpaymentTableNoChanging(value)
				Me.SendPropertyChanging
				Me._paymentTableNo = value
				Me.SendPropertyChanged("paymentTableNo")
				Me.OnpaymentTableNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Payment_Order", Storage:="_Orders", ThisKey:="paymentId", OtherKey:="ordID")>  _
	Public Property Orders() As EntitySet(Of [Order])
		Get
			Return Me._Orders
		End Get
		Set
			Me._Orders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Payment = Me
	End Sub
	
	Private Sub detach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Payment = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Stock")>  _
Partial Public Class Stock
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _stkID As String
	
	Private _stkType As String
	
	Private _stkName As String
	
	Private _stkDescription As String
	
	Private _stkBrand As String
	
	Private _stkBeforeGst As System.Nullable(Of Decimal)
	
	Private _stkAfterGst As System.Nullable(Of Decimal)
	
	Private _stkStatus As String
	
	Private _stkQty As System.Nullable(Of Integer)
	
	Private _stkImageName As String
	
	Private _supID As String
	
	Private _Supplier As EntityRef(Of Supplier)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstkIDChanging(value As String)
    End Sub
    Partial Private Sub OnstkIDChanged()
    End Sub
    Partial Private Sub OnstkTypeChanging(value As String)
    End Sub
    Partial Private Sub OnstkTypeChanged()
    End Sub
    Partial Private Sub OnstkNameChanging(value As String)
    End Sub
    Partial Private Sub OnstkNameChanged()
    End Sub
    Partial Private Sub OnstkDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnstkDescriptionChanged()
    End Sub
    Partial Private Sub OnstkBrandChanging(value As String)
    End Sub
    Partial Private Sub OnstkBrandChanged()
    End Sub
    Partial Private Sub OnstkBeforeGstChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnstkBeforeGstChanged()
    End Sub
    Partial Private Sub OnstkAfterGstChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnstkAfterGstChanged()
    End Sub
    Partial Private Sub OnstkStatusChanging(value As String)
    End Sub
    Partial Private Sub OnstkStatusChanged()
    End Sub
    Partial Private Sub OnstkQtyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstkQtyChanged()
    End Sub
    Partial Private Sub OnstkImageNameChanging(value As String)
    End Sub
    Partial Private Sub OnstkImageNameChanged()
    End Sub
    Partial Private Sub OnsupIDChanging(value As String)
    End Sub
    Partial Private Sub OnsupIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Supplier = CType(Nothing, EntityRef(Of Supplier))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stkID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property stkID() As String
		Get
			Return Me._stkID
		End Get
		Set
			If (String.Equals(Me._stkID, value) = false) Then
				Me.OnstkIDChanging(value)
				Me.SendPropertyChanging
				Me._stkID = value
				Me.SendPropertyChanged("stkID")
				Me.OnstkIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stkType", DbType:="VarChar(30)")>  _
	Public Property stkType() As String
		Get
			Return Me._stkType
		End Get
		Set
			If (String.Equals(Me._stkType, value) = false) Then
				Me.OnstkTypeChanging(value)
				Me.SendPropertyChanging
				Me._stkType = value
				Me.SendPropertyChanged("stkType")
				Me.OnstkTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stkName", DbType:="VarChar(30)")>  _
	Public Property stkName() As String
		Get
			Return Me._stkName
		End Get
		Set
			If (String.Equals(Me._stkName, value) = false) Then
				Me.OnstkNameChanging(value)
				Me.SendPropertyChanging
				Me._stkName = value
				Me.SendPropertyChanged("stkName")
				Me.OnstkNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stkDescription", DbType:="VarChar(50)")>  _
	Public Property stkDescription() As String
		Get
			Return Me._stkDescription
		End Get
		Set
			If (String.Equals(Me._stkDescription, value) = false) Then
				Me.OnstkDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._stkDescription = value
				Me.SendPropertyChanged("stkDescription")
				Me.OnstkDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stkBrand", DbType:="VarChar(30)")>  _
	Public Property stkBrand() As String
		Get
			Return Me._stkBrand
		End Get
		Set
			If (String.Equals(Me._stkBrand, value) = false) Then
				Me.OnstkBrandChanging(value)
				Me.SendPropertyChanging
				Me._stkBrand = value
				Me.SendPropertyChanged("stkBrand")
				Me.OnstkBrandChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stkBeforeGst", DbType:="Decimal(18,2)")>  _
	Public Property stkBeforeGst() As System.Nullable(Of Decimal)
		Get
			Return Me._stkBeforeGst
		End Get
		Set
			If (Me._stkBeforeGst.Equals(value) = false) Then
				Me.OnstkBeforeGstChanging(value)
				Me.SendPropertyChanging
				Me._stkBeforeGst = value
				Me.SendPropertyChanged("stkBeforeGst")
				Me.OnstkBeforeGstChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stkAfterGst", DbType:="Decimal(18,2)")>  _
	Public Property stkAfterGst() As System.Nullable(Of Decimal)
		Get
			Return Me._stkAfterGst
		End Get
		Set
			If (Me._stkAfterGst.Equals(value) = false) Then
				Me.OnstkAfterGstChanging(value)
				Me.SendPropertyChanging
				Me._stkAfterGst = value
				Me.SendPropertyChanged("stkAfterGst")
				Me.OnstkAfterGstChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stkStatus", DbType:="VarChar(20)")>  _
	Public Property stkStatus() As String
		Get
			Return Me._stkStatus
		End Get
		Set
			If (String.Equals(Me._stkStatus, value) = false) Then
				Me.OnstkStatusChanging(value)
				Me.SendPropertyChanging
				Me._stkStatus = value
				Me.SendPropertyChanged("stkStatus")
				Me.OnstkStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stkQty", DbType:="Int")>  _
	Public Property stkQty() As System.Nullable(Of Integer)
		Get
			Return Me._stkQty
		End Get
		Set
			If (Me._stkQty.Equals(value) = false) Then
				Me.OnstkQtyChanging(value)
				Me.SendPropertyChanging
				Me._stkQty = value
				Me.SendPropertyChanged("stkQty")
				Me.OnstkQtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stkImageName", DbType:="VarChar(50)")>  _
	Public Property stkImageName() As String
		Get
			Return Me._stkImageName
		End Get
		Set
			If (String.Equals(Me._stkImageName, value) = false) Then
				Me.OnstkImageNameChanging(value)
				Me.SendPropertyChanging
				Me._stkImageName = value
				Me.SendPropertyChanged("stkImageName")
				Me.OnstkImageNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supID", DbType:="VarChar(5)")>  _
	Public Property supID() As String
		Get
			Return Me._supID
		End Get
		Set
			If (String.Equals(Me._supID, value) = false) Then
				If Me._Supplier.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnsupIDChanging(value)
				Me.SendPropertyChanging
				Me._supID = value
				Me.SendPropertyChanged("supID")
				Me.OnsupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_Stock", Storage:="_Supplier", ThisKey:="supID", OtherKey:="supId", IsForeignKey:=true)>  _
	Public Property Supplier() As Supplier
		Get
			Return Me._Supplier.Entity
		End Get
		Set
			Dim previousValue As Supplier = Me._Supplier.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Supplier.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Supplier.Entity = Nothing
					previousValue.Stocks.Remove(Me)
				End If
				Me._Supplier.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Stocks.Add(Me)
					Me._supID = value.supId
				Else
					Me._supID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Supplier")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Supplier")>  _
Partial Public Class Supplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _supId As String
	
	Private _supName As String
	
	Private _supCompany As String
	
	Private _supDescription As String
	
	Private _supAddress As String
	
	Private _supState As String
	
	Private _supPostcode As System.Nullable(Of Integer)
	
	Private _supCountry As String
	
	Private _supPhone1 As String
	
	Private _supPhone2 As String
	
	Private _supFax1 As String
	
	Private _supFax2 As String
	
	Private _supEmail As String
	
	Private _supStatus As String
	
	Private _supImageName As String
	
	Private _Stocks As EntitySet(Of Stock)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsupIdChanging(value As String)
    End Sub
    Partial Private Sub OnsupIdChanged()
    End Sub
    Partial Private Sub OnsupNameChanging(value As String)
    End Sub
    Partial Private Sub OnsupNameChanged()
    End Sub
    Partial Private Sub OnsupCompanyChanging(value As String)
    End Sub
    Partial Private Sub OnsupCompanyChanged()
    End Sub
    Partial Private Sub OnsupDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnsupDescriptionChanged()
    End Sub
    Partial Private Sub OnsupAddressChanging(value As String)
    End Sub
    Partial Private Sub OnsupAddressChanged()
    End Sub
    Partial Private Sub OnsupStateChanging(value As String)
    End Sub
    Partial Private Sub OnsupStateChanged()
    End Sub
    Partial Private Sub OnsupPostcodeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsupPostcodeChanged()
    End Sub
    Partial Private Sub OnsupCountryChanging(value As String)
    End Sub
    Partial Private Sub OnsupCountryChanged()
    End Sub
    Partial Private Sub OnsupPhone1Changing(value As String)
    End Sub
    Partial Private Sub OnsupPhone1Changed()
    End Sub
    Partial Private Sub OnsupPhone2Changing(value As String)
    End Sub
    Partial Private Sub OnsupPhone2Changed()
    End Sub
    Partial Private Sub OnsupFax1Changing(value As String)
    End Sub
    Partial Private Sub OnsupFax1Changed()
    End Sub
    Partial Private Sub OnsupFax2Changing(value As String)
    End Sub
    Partial Private Sub OnsupFax2Changed()
    End Sub
    Partial Private Sub OnsupEmailChanging(value As String)
    End Sub
    Partial Private Sub OnsupEmailChanged()
    End Sub
    Partial Private Sub OnsupStatusChanging(value As String)
    End Sub
    Partial Private Sub OnsupStatusChanged()
    End Sub
    Partial Private Sub OnsupImageNameChanging(value As String)
    End Sub
    Partial Private Sub OnsupImageNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Stocks = New EntitySet(Of Stock)(AddressOf Me.attach_Stocks, AddressOf Me.detach_Stocks)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supId", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property supId() As String
		Get
			Return Me._supId
		End Get
		Set
			If (String.Equals(Me._supId, value) = false) Then
				Me.OnsupIdChanging(value)
				Me.SendPropertyChanging
				Me._supId = value
				Me.SendPropertyChanged("supId")
				Me.OnsupIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supName", DbType:="VarChar(40)")>  _
	Public Property supName() As String
		Get
			Return Me._supName
		End Get
		Set
			If (String.Equals(Me._supName, value) = false) Then
				Me.OnsupNameChanging(value)
				Me.SendPropertyChanging
				Me._supName = value
				Me.SendPropertyChanged("supName")
				Me.OnsupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supCompany", DbType:="VarChar(30)")>  _
	Public Property supCompany() As String
		Get
			Return Me._supCompany
		End Get
		Set
			If (String.Equals(Me._supCompany, value) = false) Then
				Me.OnsupCompanyChanging(value)
				Me.SendPropertyChanging
				Me._supCompany = value
				Me.SendPropertyChanged("supCompany")
				Me.OnsupCompanyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supDescription", DbType:="VarChar(50)")>  _
	Public Property supDescription() As String
		Get
			Return Me._supDescription
		End Get
		Set
			If (String.Equals(Me._supDescription, value) = false) Then
				Me.OnsupDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._supDescription = value
				Me.SendPropertyChanged("supDescription")
				Me.OnsupDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supAddress", DbType:="VarChar(30)")>  _
	Public Property supAddress() As String
		Get
			Return Me._supAddress
		End Get
		Set
			If (String.Equals(Me._supAddress, value) = false) Then
				Me.OnsupAddressChanging(value)
				Me.SendPropertyChanging
				Me._supAddress = value
				Me.SendPropertyChanged("supAddress")
				Me.OnsupAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supState", DbType:="VarChar(20)")>  _
	Public Property supState() As String
		Get
			Return Me._supState
		End Get
		Set
			If (String.Equals(Me._supState, value) = false) Then
				Me.OnsupStateChanging(value)
				Me.SendPropertyChanging
				Me._supState = value
				Me.SendPropertyChanged("supState")
				Me.OnsupStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supPostcode", DbType:="Int")>  _
	Public Property supPostcode() As System.Nullable(Of Integer)
		Get
			Return Me._supPostcode
		End Get
		Set
			If (Me._supPostcode.Equals(value) = false) Then
				Me.OnsupPostcodeChanging(value)
				Me.SendPropertyChanging
				Me._supPostcode = value
				Me.SendPropertyChanged("supPostcode")
				Me.OnsupPostcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supCountry", DbType:="VarChar(20)")>  _
	Public Property supCountry() As String
		Get
			Return Me._supCountry
		End Get
		Set
			If (String.Equals(Me._supCountry, value) = false) Then
				Me.OnsupCountryChanging(value)
				Me.SendPropertyChanging
				Me._supCountry = value
				Me.SendPropertyChanged("supCountry")
				Me.OnsupCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supPhone1", DbType:="VarChar(12)")>  _
	Public Property supPhone1() As String
		Get
			Return Me._supPhone1
		End Get
		Set
			If (String.Equals(Me._supPhone1, value) = false) Then
				Me.OnsupPhone1Changing(value)
				Me.SendPropertyChanging
				Me._supPhone1 = value
				Me.SendPropertyChanged("supPhone1")
				Me.OnsupPhone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supPhone2", DbType:="VarChar(12)")>  _
	Public Property supPhone2() As String
		Get
			Return Me._supPhone2
		End Get
		Set
			If (String.Equals(Me._supPhone2, value) = false) Then
				Me.OnsupPhone2Changing(value)
				Me.SendPropertyChanging
				Me._supPhone2 = value
				Me.SendPropertyChanged("supPhone2")
				Me.OnsupPhone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supFax1", DbType:="VarChar(12)")>  _
	Public Property supFax1() As String
		Get
			Return Me._supFax1
		End Get
		Set
			If (String.Equals(Me._supFax1, value) = false) Then
				Me.OnsupFax1Changing(value)
				Me.SendPropertyChanging
				Me._supFax1 = value
				Me.SendPropertyChanged("supFax1")
				Me.OnsupFax1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supFax2", DbType:="VarChar(12)")>  _
	Public Property supFax2() As String
		Get
			Return Me._supFax2
		End Get
		Set
			If (String.Equals(Me._supFax2, value) = false) Then
				Me.OnsupFax2Changing(value)
				Me.SendPropertyChanging
				Me._supFax2 = value
				Me.SendPropertyChanged("supFax2")
				Me.OnsupFax2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supEmail", DbType:="VarChar(30)")>  _
	Public Property supEmail() As String
		Get
			Return Me._supEmail
		End Get
		Set
			If (String.Equals(Me._supEmail, value) = false) Then
				Me.OnsupEmailChanging(value)
				Me.SendPropertyChanging
				Me._supEmail = value
				Me.SendPropertyChanged("supEmail")
				Me.OnsupEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supStatus", DbType:="VarChar(30)")>  _
	Public Property supStatus() As String
		Get
			Return Me._supStatus
		End Get
		Set
			If (String.Equals(Me._supStatus, value) = false) Then
				Me.OnsupStatusChanging(value)
				Me.SendPropertyChanging
				Me._supStatus = value
				Me.SendPropertyChanged("supStatus")
				Me.OnsupStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supImageName", DbType:="VarChar(50)")>  _
	Public Property supImageName() As String
		Get
			Return Me._supImageName
		End Get
		Set
			If (String.Equals(Me._supImageName, value) = false) Then
				Me.OnsupImageNameChanging(value)
				Me.SendPropertyChanging
				Me._supImageName = value
				Me.SendPropertyChanged("supImageName")
				Me.OnsupImageNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_Stock", Storage:="_Stocks", ThisKey:="supId", OtherKey:="supID")>  _
	Public Property Stocks() As EntitySet(Of Stock)
		Get
			Return Me._Stocks
		End Get
		Set
			Me._Stocks.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Stocks(ByVal entity As Stock)
		Me.SendPropertyChanging
		entity.Supplier = Me
	End Sub
	
	Private Sub detach_Stocks(ByVal entity As Stock)
		Me.SendPropertyChanging
		entity.Supplier = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Order]")>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ordID As Integer
	
	Private _ordQty As System.Nullable(Of Integer)
	
	Private _productID As String
	
	Private _tableNo As String
	
	Private _Products As EntitySet(Of Product)
	
	Private _Payment As EntityRef(Of Payment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnordIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnordIDChanged()
    End Sub
    Partial Private Sub OnordQtyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnordQtyChanged()
    End Sub
    Partial Private Sub OnproductIDChanging(value As String)
    End Sub
    Partial Private Sub OnproductIDChanged()
    End Sub
    Partial Private Sub OntableNoChanging(value As String)
    End Sub
    Partial Private Sub OntableNoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		Me._Payment = CType(Nothing, EntityRef(Of Payment))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ordID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ordID() As Integer
		Get
			Return Me._ordID
		End Get
		Set
			If ((Me._ordID = value)  _
						= false) Then
				If Me._Payment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnordIDChanging(value)
				Me.SendPropertyChanging
				Me._ordID = value
				Me.SendPropertyChanged("ordID")
				Me.OnordIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ordQty", DbType:="Int")>  _
	Public Property ordQty() As System.Nullable(Of Integer)
		Get
			Return Me._ordQty
		End Get
		Set
			If (Me._ordQty.Equals(value) = false) Then
				Me.OnordQtyChanging(value)
				Me.SendPropertyChanging
				Me._ordQty = value
				Me.SendPropertyChanged("ordQty")
				Me.OnordQtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property productID() As String
		Get
			Return Me._productID
		End Get
		Set
			If (String.Equals(Me._productID, value) = false) Then
				Me.OnproductIDChanging(value)
				Me.SendPropertyChanging
				Me._productID = value
				Me.SendPropertyChanged("productID")
				Me.OnproductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tableNo", DbType:="VarChar(7)")>  _
	Public Property tableNo() As String
		Get
			Return Me._tableNo
		End Get
		Set
			If (String.Equals(Me._tableNo, value) = false) Then
				Me.OntableNoChanging(value)
				Me.SendPropertyChanging
				Me._tableNo = value
				Me.SendPropertyChanged("tableNo")
				Me.OntableNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_Product", Storage:="_Products", ThisKey:="productID", OtherKey:="productID")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Payment_Order", Storage:="_Payment", ThisKey:="ordID", OtherKey:="paymentId", IsForeignKey:=true)>  _
	Public Property Payment() As Payment
		Get
			Return Me._Payment.Entity
		End Get
		Set
			Dim previousValue As Payment = Me._Payment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Payment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Payment.Entity = Nothing
					previousValue.Orders.Remove(Me)
				End If
				Me._Payment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders.Add(Me)
					Me._ordID = value.paymentId
				Else
					Me._ordID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Payment")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.[Order] = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.[Order] = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Reservation")>  _
Partial Public Class Reservation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _reserveId As String
	
	Private _reserveName As String
	
	Private _reserveContact As String
	
	Private _reserveDate As System.Nullable(Of Date)
	
	Private _reserveTime As System.Nullable(Of System.TimeSpan)
	
	Private _reservePax As System.Nullable(Of Integer)
	
	Private _reserveTable As System.Nullable(Of Integer)
	
	Private _reserveStatus As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnreserveIdChanging(value As String)
    End Sub
    Partial Private Sub OnreserveIdChanged()
    End Sub
    Partial Private Sub OnreserveNameChanging(value As String)
    End Sub
    Partial Private Sub OnreserveNameChanged()
    End Sub
    Partial Private Sub OnreserveContactChanging(value As String)
    End Sub
    Partial Private Sub OnreserveContactChanged()
    End Sub
    Partial Private Sub OnreserveDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnreserveDateChanged()
    End Sub
    Partial Private Sub OnreserveTimeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnreserveTimeChanged()
    End Sub
    Partial Private Sub OnreservePaxChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnreservePaxChanged()
    End Sub
    Partial Private Sub OnreserveTableChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnreserveTableChanged()
    End Sub
    Partial Private Sub OnreserveStatusChanging(value As String)
    End Sub
    Partial Private Sub OnreserveStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reserveId", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property reserveId() As String
		Get
			Return Me._reserveId
		End Get
		Set
			If (String.Equals(Me._reserveId, value) = false) Then
				Me.OnreserveIdChanging(value)
				Me.SendPropertyChanging
				Me._reserveId = value
				Me.SendPropertyChanged("reserveId")
				Me.OnreserveIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reserveName", DbType:="VarChar(40)")>  _
	Public Property reserveName() As String
		Get
			Return Me._reserveName
		End Get
		Set
			If (String.Equals(Me._reserveName, value) = false) Then
				Me.OnreserveNameChanging(value)
				Me.SendPropertyChanging
				Me._reserveName = value
				Me.SendPropertyChanged("reserveName")
				Me.OnreserveNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reserveContact", DbType:="VarChar(12)")>  _
	Public Property reserveContact() As String
		Get
			Return Me._reserveContact
		End Get
		Set
			If (String.Equals(Me._reserveContact, value) = false) Then
				Me.OnreserveContactChanging(value)
				Me.SendPropertyChanging
				Me._reserveContact = value
				Me.SendPropertyChanged("reserveContact")
				Me.OnreserveContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reserveDate", DbType:="Date")>  _
	Public Property reserveDate() As System.Nullable(Of Date)
		Get
			Return Me._reserveDate
		End Get
		Set
			If (Me._reserveDate.Equals(value) = false) Then
				Me.OnreserveDateChanging(value)
				Me.SendPropertyChanging
				Me._reserveDate = value
				Me.SendPropertyChanged("reserveDate")
				Me.OnreserveDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reserveTime", DbType:="Time")>  _
	Public Property reserveTime() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._reserveTime
		End Get
		Set
			If (Me._reserveTime.Equals(value) = false) Then
				Me.OnreserveTimeChanging(value)
				Me.SendPropertyChanging
				Me._reserveTime = value
				Me.SendPropertyChanged("reserveTime")
				Me.OnreserveTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reservePax", DbType:="Int")>  _
	Public Property reservePax() As System.Nullable(Of Integer)
		Get
			Return Me._reservePax
		End Get
		Set
			If (Me._reservePax.Equals(value) = false) Then
				Me.OnreservePaxChanging(value)
				Me.SendPropertyChanging
				Me._reservePax = value
				Me.SendPropertyChanged("reservePax")
				Me.OnreservePaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reserveTable", DbType:="Int")>  _
	Public Property reserveTable() As System.Nullable(Of Integer)
		Get
			Return Me._reserveTable
		End Get
		Set
			If (Me._reserveTable.Equals(value) = false) Then
				Me.OnreserveTableChanging(value)
				Me.SendPropertyChanging
				Me._reserveTable = value
				Me.SendPropertyChanged("reserveTable")
				Me.OnreserveTableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reserveStatus", DbType:="VarChar(20)")>  _
	Public Property reserveStatus() As String
		Get
			Return Me._reserveStatus
		End Get
		Set
			If (String.Equals(Me._reserveStatus, value) = false) Then
				Me.OnreserveStatusChanging(value)
				Me.SendPropertyChanging
				Me._reserveStatus = value
				Me.SendPropertyChanged("reserveStatus")
				Me.OnreserveStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Employee")>  _
Partial Public Class Employee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _empId As String
	
	Private _empName As String
	
	Private _empIC As String
	
	Private _empPassport As String
	
	Private _empDOB As System.Nullable(Of Date)
	
	Private _empGender As String
	
	Private _empAddress As String
	
	Private _empState As String
	
	Private _empPostcode As System.Nullable(Of Integer)
	
	Private _empCountry As String
	
	Private _empPhone1 As String
	
	Private _empPhone2 As String
	
	Private _empEmail As String
	
	Private _empPassword As String
	
	Private _empPosition As String
	
	Private _empSalary As System.Nullable(Of Decimal)
	
	Private _empStatus As String
	
	Private _empImageName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnempIdChanging(value As String)
    End Sub
    Partial Private Sub OnempIdChanged()
    End Sub
    Partial Private Sub OnempNameChanging(value As String)
    End Sub
    Partial Private Sub OnempNameChanged()
    End Sub
    Partial Private Sub OnempICChanging(value As String)
    End Sub
    Partial Private Sub OnempICChanged()
    End Sub
    Partial Private Sub OnempPassportChanging(value As String)
    End Sub
    Partial Private Sub OnempPassportChanged()
    End Sub
    Partial Private Sub OnempDOBChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnempDOBChanged()
    End Sub
    Partial Private Sub OnempGenderChanging(value As String)
    End Sub
    Partial Private Sub OnempGenderChanged()
    End Sub
    Partial Private Sub OnempAddressChanging(value As String)
    End Sub
    Partial Private Sub OnempAddressChanged()
    End Sub
    Partial Private Sub OnempStateChanging(value As String)
    End Sub
    Partial Private Sub OnempStateChanged()
    End Sub
    Partial Private Sub OnempPostcodeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnempPostcodeChanged()
    End Sub
    Partial Private Sub OnempCountryChanging(value As String)
    End Sub
    Partial Private Sub OnempCountryChanged()
    End Sub
    Partial Private Sub OnempPhone1Changing(value As String)
    End Sub
    Partial Private Sub OnempPhone1Changed()
    End Sub
    Partial Private Sub OnempPhone2Changing(value As String)
    End Sub
    Partial Private Sub OnempPhone2Changed()
    End Sub
    Partial Private Sub OnempEmailChanging(value As String)
    End Sub
    Partial Private Sub OnempEmailChanged()
    End Sub
    Partial Private Sub OnempPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnempPasswordChanged()
    End Sub
    Partial Private Sub OnempPositionChanging(value As String)
    End Sub
    Partial Private Sub OnempPositionChanged()
    End Sub
    Partial Private Sub OnempSalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnempSalaryChanged()
    End Sub
    Partial Private Sub OnempStatusChanging(value As String)
    End Sub
    Partial Private Sub OnempStatusChanged()
    End Sub
    Partial Private Sub OnempImageNameChanging(value As String)
    End Sub
    Partial Private Sub OnempImageNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empId", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property empId() As String
		Get
			Return Me._empId
		End Get
		Set
			If (String.Equals(Me._empId, value) = false) Then
				Me.OnempIdChanging(value)
				Me.SendPropertyChanging
				Me._empId = value
				Me.SendPropertyChanged("empId")
				Me.OnempIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empName", DbType:="VarChar(40)")>  _
	Public Property empName() As String
		Get
			Return Me._empName
		End Get
		Set
			If (String.Equals(Me._empName, value) = false) Then
				Me.OnempNameChanging(value)
				Me.SendPropertyChanging
				Me._empName = value
				Me.SendPropertyChanged("empName")
				Me.OnempNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empIC", DbType:="VarChar(14)")>  _
	Public Property empIC() As String
		Get
			Return Me._empIC
		End Get
		Set
			If (String.Equals(Me._empIC, value) = false) Then
				Me.OnempICChanging(value)
				Me.SendPropertyChanging
				Me._empIC = value
				Me.SendPropertyChanged("empIC")
				Me.OnempICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empPassport", DbType:="VarChar(14)")>  _
	Public Property empPassport() As String
		Get
			Return Me._empPassport
		End Get
		Set
			If (String.Equals(Me._empPassport, value) = false) Then
				Me.OnempPassportChanging(value)
				Me.SendPropertyChanging
				Me._empPassport = value
				Me.SendPropertyChanged("empPassport")
				Me.OnempPassportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empDOB", DbType:="Date")>  _
	Public Property empDOB() As System.Nullable(Of Date)
		Get
			Return Me._empDOB
		End Get
		Set
			If (Me._empDOB.Equals(value) = false) Then
				Me.OnempDOBChanging(value)
				Me.SendPropertyChanging
				Me._empDOB = value
				Me.SendPropertyChanged("empDOB")
				Me.OnempDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empGender", DbType:="VarChar(6)")>  _
	Public Property empGender() As String
		Get
			Return Me._empGender
		End Get
		Set
			If (String.Equals(Me._empGender, value) = false) Then
				Me.OnempGenderChanging(value)
				Me.SendPropertyChanging
				Me._empGender = value
				Me.SendPropertyChanged("empGender")
				Me.OnempGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empAddress", DbType:="VarChar(50)")>  _
	Public Property empAddress() As String
		Get
			Return Me._empAddress
		End Get
		Set
			If (String.Equals(Me._empAddress, value) = false) Then
				Me.OnempAddressChanging(value)
				Me.SendPropertyChanging
				Me._empAddress = value
				Me.SendPropertyChanged("empAddress")
				Me.OnempAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empState", DbType:="VarChar(20)")>  _
	Public Property empState() As String
		Get
			Return Me._empState
		End Get
		Set
			If (String.Equals(Me._empState, value) = false) Then
				Me.OnempStateChanging(value)
				Me.SendPropertyChanging
				Me._empState = value
				Me.SendPropertyChanged("empState")
				Me.OnempStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empPostcode", DbType:="Int")>  _
	Public Property empPostcode() As System.Nullable(Of Integer)
		Get
			Return Me._empPostcode
		End Get
		Set
			If (Me._empPostcode.Equals(value) = false) Then
				Me.OnempPostcodeChanging(value)
				Me.SendPropertyChanging
				Me._empPostcode = value
				Me.SendPropertyChanged("empPostcode")
				Me.OnempPostcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empCountry", DbType:="VarChar(20)")>  _
	Public Property empCountry() As String
		Get
			Return Me._empCountry
		End Get
		Set
			If (String.Equals(Me._empCountry, value) = false) Then
				Me.OnempCountryChanging(value)
				Me.SendPropertyChanging
				Me._empCountry = value
				Me.SendPropertyChanged("empCountry")
				Me.OnempCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empPhone1", DbType:="VarChar(12)")>  _
	Public Property empPhone1() As String
		Get
			Return Me._empPhone1
		End Get
		Set
			If (String.Equals(Me._empPhone1, value) = false) Then
				Me.OnempPhone1Changing(value)
				Me.SendPropertyChanging
				Me._empPhone1 = value
				Me.SendPropertyChanged("empPhone1")
				Me.OnempPhone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empPhone2", DbType:="VarChar(12)")>  _
	Public Property empPhone2() As String
		Get
			Return Me._empPhone2
		End Get
		Set
			If (String.Equals(Me._empPhone2, value) = false) Then
				Me.OnempPhone2Changing(value)
				Me.SendPropertyChanging
				Me._empPhone2 = value
				Me.SendPropertyChanged("empPhone2")
				Me.OnempPhone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empEmail", DbType:="VarChar(30)")>  _
	Public Property empEmail() As String
		Get
			Return Me._empEmail
		End Get
		Set
			If (String.Equals(Me._empEmail, value) = false) Then
				Me.OnempEmailChanging(value)
				Me.SendPropertyChanging
				Me._empEmail = value
				Me.SendPropertyChanged("empEmail")
				Me.OnempEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empPassword", DbType:="VarChar(48) NOT NULL", CanBeNull:=false)>  _
	Public Property empPassword() As String
		Get
			Return Me._empPassword
		End Get
		Set
			If (String.Equals(Me._empPassword, value) = false) Then
				Me.OnempPasswordChanging(value)
				Me.SendPropertyChanging
				Me._empPassword = value
				Me.SendPropertyChanged("empPassword")
				Me.OnempPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empPosition", DbType:="VarChar(20)")>  _
	Public Property empPosition() As String
		Get
			Return Me._empPosition
		End Get
		Set
			If (String.Equals(Me._empPosition, value) = false) Then
				Me.OnempPositionChanging(value)
				Me.SendPropertyChanging
				Me._empPosition = value
				Me.SendPropertyChanged("empPosition")
				Me.OnempPositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empSalary", DbType:="Decimal(18,2)")>  _
	Public Property empSalary() As System.Nullable(Of Decimal)
		Get
			Return Me._empSalary
		End Get
		Set
			If (Me._empSalary.Equals(value) = false) Then
				Me.OnempSalaryChanging(value)
				Me.SendPropertyChanging
				Me._empSalary = value
				Me.SendPropertyChanged("empSalary")
				Me.OnempSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empStatus", DbType:="VarChar(20)")>  _
	Public Property empStatus() As String
		Get
			Return Me._empStatus
		End Get
		Set
			If (String.Equals(Me._empStatus, value) = false) Then
				Me.OnempStatusChanging(value)
				Me.SendPropertyChanging
				Me._empStatus = value
				Me.SendPropertyChanged("empStatus")
				Me.OnempStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empImageName", DbType:="VarChar(50)")>  _
	Public Property empImageName() As String
		Get
			Return Me._empImageName
		End Get
		Set
			If (String.Equals(Me._empImageName, value) = false) Then
				Me.OnempImageNameChanging(value)
				Me.SendPropertyChanging
				Me._empImageName = value
				Me.SendPropertyChanged("empImageName")
				Me.OnempImageNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
